# -*- coding: utf-8 -*-
"""GitaToImage.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s33arIpkWv8HM7K1yQmpmznRQsZhmaNS
"""

!pip install python-docx

from docx import Document

def extract_text_from_docx(file_path):
    doc = Document(file_path)
    text = "\n".join([paragraph.text for paragraph in doc.paragraphs])
    return text

file_path = "gita_processed.docx"
text = extract_text_from_docx(file_path)
#print(text)

def text_to_binary(text):
    binary_string = ''.join(format(ord(char), '08b') for char in text)
    return binary_string

binary_equivalent = text_to_binary(text)
#print(binary_equivalent)

from PIL import Image

def binary_to_image(binary_string, bit_size=2):
    # Determine the dimensions of the image
    num_bits = len(binary_string)
    pixels_per_row = int((num_bits ** 0.5))
    if pixels_per_row * pixels_per_row < num_bits:
        pixels_per_row += 1

    # Add padding to make the binary string fit the grid
    padded_binary = binary_string.ljust(pixels_per_row ** 2, '0')

    # Create a blank image (white background)
    image_size = pixels_per_row * bit_size
    img = Image.new('RGB', (image_size, image_size), "white")
    pixels = img.load()

    # Draw the 2x2 pixel squares for each bit
    for i, bit in enumerate(padded_binary):
        row = (i // pixels_per_row) * bit_size
        col = (i % pixels_per_row) * bit_size
        color = (255, 165, 0) if bit == '1' else (0, 0, 139)  # Black for 1, white for 0

        for x in range(bit_size):
            for y in range(bit_size):
                pixels[col + x, row + y] = color

    return img

# Example usage
binary_string = binary_equivalent  # Replace this with your binary string
image = binary_to_image(binary_string)
image.show()  # Display the image
image.save("binary_image.png")  # Save the image

